package message_test

import (
	"testing"

	"github.com/bahner/go-ma/did"
	"github.com/bahner/go-ma/key"
	"github.com/bahner/go-ma/message"
)

func TestSign(t *testing.T) {
	myKey, err := key.New()
	if err != nil {
		t.Fatalf("Key generation failed: %v", err)
	}

	myIdentifier := myKey.IPNSName.String() + "#footerFragment"
	myDID := did.New("space", myIdentifier)

	myMessage, err := message.New(
		myDID.String(),
		myDID.String(),
		"Hello, World!",
		message.MimeType("text"))

	if err != nil {
		t.Fatalf("Message creation failed: %v", err)
	}

	err = myMessage.Sign(myKey.PrivKey)
	if err != nil {
		t.Fatalf("Sign failed: %v", err)
	}

	if myMessage.Signature == "" {
		t.Errorf("Signature is empty")
	}
}

// FIXME: debug test. The function works IRL, but not in test.
// func TestVerify(t *testing.T) {
// 	myKey, err := key.New()
// 	if err != nil {
// 		t.Fatalf("Key generation failed: %v", err)
// 	}

// 	myMessage := validMessage()
// 	if err != nil {
// 		t.Fatalf("Message creation failed: %v", err)
// 	}

// 	err = myMessage.Sign(myKey.PrivKey)
// 	if err != nil {
// 		t.Fatalf("Sign failed: %v", err)
// 	}

// 	isVerified, err := myMessage.Verify()
// 	if err != nil {
// 		t.Fatalf("Verify failed: %v", err)
// 	}

// 	if !isVerified {
// 		t.Errorf("Message signature verification failed")
// 	}
// }

func TestPublicKey(t *testing.T) {
	myKey, err := key.New()
	if err != nil {
		t.Fatalf("Key generation failed: %v", err)
	}

	myIdentifier := myKey.IPNSName.String() + "#footerFragment"
	myDID := did.New("space", myIdentifier)

	publicKey, err := message.PublicKey(myDID)
	if err != nil {
		t.Fatalf("PublicKey failed: %v", err)
	}

	if publicKey == nil {
		t.Errorf("Public key is nil")
	}
}
